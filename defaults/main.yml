versions:
  graphite:
    carbon: "{{ version | default('0.11.0') }}"

# Go-Graphite namespace
graphite:

  # Go-Carbon settings
  carbon:

    # Name of the managed service
    name: "go-carbon"

    # Version of the collectd daemon
    version: "{{ versions.graphite.carbon }}"

    # Base/working directory for a service
    home: "{{ carbon_home | default('/var/lib/go-carbon') }}"

    # Location for configuration files
    conf: "/etc/go-carbon"

    # Name of SysV script or Systemd unit
    daemon: "go-carbon"

    # Processes and files owner
    owner: "carbon"

    # Global options for this service
    options:

      common:
        # Prefix for store all internal go-carbon graphs. Supported macroses: {host}
        graph-prefix: "carbon.agents.{host}"

        # Increase for configuration with multi persister workers
        max-cpu: 4

        # Endpoint for store internal carbon metrics. Valid values: "" or "local", "tcp://host:port", "udp://host:port"
        metric-endpoint: "local"

        # Interval of storing internal metrics. Like CARBON_METRIC_INTERVAL
        metric-interval: "1m0s"

        # Run as user. Works only in daemon mode
        user: "carbon"

      whisper:
        data-dir: "/var/lib/graphite/whisper"

        # http://graphite.readthedocs.org/en/latest/config-carbon.html#storage-schemas-conf. Required
        schemas-file: "/etc/go-carbon/storage-schemas.conf"

        # http://graphite.readthedocs.org/en/latest/config-carbon.html#storage-aggregation-conf. Optional
        aggregation-file: "/etc/go-carbon/storage-aggregation.conf"

        # Worker threads count. Metrics sharded by "crc32(metricName) % workers"
        workers: 8

        # Limits the number of whisper update_many() calls per second. 0 - no limit
        max-updates-per-second: 0

        # Sparse file creation
        sparse-create: false
        enabled: true

      cache:
        # Limit of in-memory stored points (not metrics)
        max-size: 1000000

        # Capacity of queue between receivers and cache. Values: "max","sorted","noop"
        write-strategy: "max"

      carbonserver:
        # Please NOTE: carbonserver is not intended to fully replace graphite-web
        # It acts as a "REMOTE_STORAGE" for graphite-web or carbonzipper/carbonapi
        listen: "0.0.0.0:8081"

        # Carbonserver support is still experimental and may contain bugs
        # Or be incompatible with github.com/grobian/carbonserver
        enabled: true

        # Buckets to track response times
        buckets: 10

        # carbonserver-specific metrics will be sent as counters
        # For compatibility with grobian/carbonserver
        metrics-as-counters: false

        # Read and Write timeouts for HTTP server
        read-timeout: "60s"
        write-timeout: "60s"

        # Enable /render cache, it will cache the result for 1 minute
        query-cache-enabled: true

        # 0 for unlimited
        query-cache-size-mb: 0

        # Enable /metrics/find cache, it will cache the result for 5 minutes
        find-cache-enabled: true

        # Control trigram index
        #  This index is used to speed-up /find requests
        #  However, it will lead to increased memory consumption
        #  Estimated memory consumption is approx. 500 bytes per each metric on disk
        #  Another drawback is that it will recreate index every scan-frequency interval
        #  All new/deleted metrics will still be searchable until index is recreated
        trigram-index: true

        # carbonserver keeps track of all available whisper files
        # in memory. This determines how often it will check FS
        # for new or deleted metrics.
        scan-frequency: "5m0s"

        # Maximum amount of globs in a single metric in index
        # This value is used to speed-up /find requests with
        # a lot of globs, but will lead to increased memory consumption
        max-globs: 100

        # Use Graphite-web 1.0 native structs for pickle response. 
        # This mode will break compatibility with graphite-web 0.9.x
        graphite-web-10-strict-mode: true

      dump:
        # Enable dump/restore function on USR2 signal
        enabled: false

        # Directory for store dump data. Should be writeable for carbon
        path: "/var/lib/graphite/dump/"

        # Restore speed. 0 - unlimited
        restore-per-second: 0

      # List of loggers
      logging:
        - # Logger name, available loggers:
          # * "" - default logger for all messages without configured special logger
          logger: ""
          # Log output: filename, "stderr", "stdout", "none", "" (same as "stderr")
          file: "/var/log/go-carbon/go-carbon-1.log"
          # Log level: "debug", "info", "warn", "error", "dpanic", "panic", and "fatal"
          level: "warn"
          # Log format: "json", "console", "mixed"
          encoding: "mixed"
          # Log time format: "millis", "nanos", "epoch", "iso8601"
          encoding-time: "iso8601"
          # Log duration format: "seconds", "nanos", "string"
          encoding-duration: "seconds"


      # HTTP server to expose runtime profiling data in the format expected by the pprof visualization tool
      pprof:
        enabled: false
        listen: "localhost:7007"
